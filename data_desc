Importing data with pandas:
CSV format -> comma separated values
.read_CSV() method - can read in files with columns separated by commas into a pandas data frame
Reading data in pandas can be done quickly in three lines:
1. import pandas
2. define a variable with a file path
3. usa the .read_CSV() method to import data

The .read_csv() method assumes the data contains a header.

After a reading a dataset, it's good idea to look at the data frame. We could print it, or just print the headers.
df.head(n) - to show the first n rows of data frame
df.tail(n) - to show the bottom n rows of data frame

Pandas automatically set the column header as a list of integers, if the headers were set to None
In order to replace the column names with something more meaningful, we need to have a list wih the headers,
and then assign df columns to this list.
headers = []
df.columns = headers

Exporting data with pandas:
We can preserve progresses anytime by saving modified dataset using:
path="defined_path_with_file_name"
df.to_scv(path)

Pandas also supports other formats than csv:
csv     pd.read_csv()   df.to_csv()
json   pd.read_json()   df.to_json()
Excel  pd.read_excel() df.to_excel()
sql     pd.read_sql()   df.to_sql()

Data types:
- Pandas Type -                 Native Python Type -                            Description
- object -                      string -                                        numbers and strings
- int64 -                       int -                                           numeric characters
- float64 -                     float -                                         numeric characters with decimals
- datetime64, timedelta[ns] - /datetime module in Python's standard library/ - time data

Why check data types?
- potential info and type mismatch
- compatibility with python methods

df.dtypes() - is used to check data types

df.describe() - returns a statistical summary
    - count- number of terms
    - mean - average value
    - std - standard deviation
    - min - min value
    - 25% - boundary of each quartiles
    - 50% -
    - 75% -
    - max - max value
By default the method skips rows and columns, that don't contain numbers. But it's possible to make the .describe() method
worked for object type as well. Then we need do add an argument to the describe() method:
df.describe(include=all)
We also get additional set of data:
    - unique - number of distinct objects in column
    - top - most frequently occurring object
    - freq - number of times the top object appears in the column
    NaN - not a number

df.info() - provides a concise summary of the DataFrame - column names and data types

Accessing Databases with Python:
User <--> Python Programs <-API calls-> DBMS
The Python code connects to the database, using API calls.

1. Application program --CONNECT(db, user, pswd)--> DBMS
2. Application program --SEND("update....")-------> DBMS
3. Application program --EXECUTE()----------------> DBMS
4. Application program --STATUS_CHECK()-----------> DBMS
5. Application program <-OK------------------------ DBMS
6. Application program --DISCONNET()--------------> DBMS

An application programming interface is a set of functions that we can call to get access to some type of service.
The SQL API consists of library function calls as an application programming interface, API, for the DBMS.
To pass SQL statements to the DBMS, an application program calls functions in the API, and it calls other functions to
retrieve query results and status information from the DBMS:
1. The application program begins its database access with one or more API calls that connect the program to the DBMS.
2. To send the SQL statement to the DBMS, the program builds the statement as a text string in a buffer
3. and then makes an API call to pass the buffer contents to the DBMS.
4./5. The application program makes API calls to check the status of its DBMS request and to handle errors.
6. The application program ends its database access with an API call that disconnects it from the database

What is a DB-API?
DB-API is Python's standard API for accessing relational databases.
It's a standard, that allows us to write a single program that works with multiple kinds of relational databases
instead of writing a separate program for each one.

Two main concepts of the Python DB-APi:
1. Connection objects
    - Database connections
    - Manage transactions
2. Query objects
    - Cursor objects are used to run queries and fetch results
        We open a cursor object and then run queries. Cursors are used to scan through the results of a database.

What are Connection method? Method used with Connection objects:
.cursor() - returns a new cursor object using the connection
.commit() - commits any pending transaction to the database
.rollback() - causes the database to roll back to the start of any pending transaction
.close() - closes a database connection